Index: app/src/main/java/com/silverback/carman/adapters/BoardCommentAdapter.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.silverback.carman.adapters;\n\nimport android.content.Context;\nimport android.net.Uri;\nimport android.text.TextUtils;\nimport android.view.LayoutInflater;\nimport android.view.View;\nimport android.view.ViewGroup;\nimport android.widget.Button;\nimport android.widget.EditText;\nimport android.widget.ImageView;\nimport android.widget.PopupWindow;\nimport android.widget.TextView;\n\nimport androidx.annotation.NonNull;\nimport androidx.appcompat.widget.SwitchCompat;\nimport androidx.core.content.ContextCompat;\nimport androidx.recyclerview.widget.AsyncListDiffer;\nimport androidx.recyclerview.widget.DefaultItemAnimator;\nimport androidx.recyclerview.widget.DiffUtil;\nimport androidx.recyclerview.widget.LinearLayoutManager;\nimport androidx.recyclerview.widget.RecyclerView;\n\nimport com.google.android.material.snackbar.Snackbar;\nimport com.google.common.collect.Lists;\nimport com.google.firebase.firestore.DocumentReference;\nimport com.google.firebase.firestore.DocumentSnapshot;\nimport com.google.firebase.firestore.FieldValue;\nimport com.google.firebase.firestore.FirebaseFirestore;\nimport com.google.firebase.firestore.Transaction;\nimport com.google.firebase.firestore.WriteBatch;\nimport com.silverback.carman.BoardActivity;\nimport com.silverback.carman.R;\nimport com.silverback.carman.databinding.ItemviewBoardCommentBinding;\nimport com.silverback.carman.databinding.PopupWindowOverflowBinding;\nimport com.silverback.carman.logs.LoggingHelper;\nimport com.silverback.carman.logs.LoggingHelperFactory;\nimport com.silverback.carman.utils.ApplyImageResourceUtil;\nimport com.silverback.carman.utils.Constants;\nimport com.silverback.carman.utils.PopupDropdownUtil;\nimport com.silverback.carman.utils.RecyclerDividerUtil;\n\nimport java.text.SimpleDateFormat;\nimport java.util.ArrayList;\nimport java.util.Date;\nimport java.util.HashMap;\nimport java.util.List;\nimport java.util.Locale;\nimport java.util.Map;\nimport java.util.Objects;\n\npublic class BoardCommentAdapter extends RecyclerView.Adapter<BoardCommentAdapter.ViewHolder> {\n\n    private static final LoggingHelper log = LoggingHelperFactory.create(BoardCommentAdapter.class);\n\n    private final Context context;\n    private final CommentAdapterListener commentAdapterListener;\n    private final FirebaseFirestore mDB;\n    private final AsyncListDiffer<DocumentSnapshot> mDiffer;\n    private final List<DocumentSnapshot> commentList;\n    private final ApplyImageResourceUtil imageUtil;\n    private final PopupDropdownUtil popupDropdownUtil;\n    private final RecyclerDividerUtil divider;\n    private final BoardReplyAdapter replyAdapter;\n    private ArrayList<DocumentSnapshot> replyList;\n    //private final Context styleWrapper; // for the PopupMenu\n    //private final ArrayAdapter arrayCommentAdapter;\n    //private ListPopupWindow popupWindow;\n    private final String viewerId;\n    private int currentChecked;\n    private long cntReply;\n    private boolean isReplyUploaded;\n    private int userImageX, userImageY;\n\n    public interface CommentAdapterListener {\n        void deleteComment(DocumentSnapshot snapshot);\n        void deleteCommentReply(BoardReplyAdapter adapter, DocumentReference commentRef);\n        void notifyUploadReplyDone(int position, boolean isDone);\n        void notifyNoData();\n        void notifyReplySwitchChecked(int bindingPos);\n        void notifyEditTextFocused(View view);\n    }\n\n    // Constructor\n    public BoardCommentAdapter(Context context, List<DocumentSnapshot> commentList, String viewerId,\n                               CommentAdapterListener listener) {\n        this.context = context;\n        this.commentList = commentList;\n        this.viewerId = viewerId;\n        this.commentAdapterListener = listener;\n\n        mDB = FirebaseFirestore.getInstance();\n        imageUtil = new ApplyImageResourceUtil(context);\n        mDiffer = new AsyncListDiffer<>(this, DIFF_CALLBACK_COMMENT);\n        popupDropdownUtil = PopupDropdownUtil.getInstance();\n        divider = new RecyclerDividerUtil(Constants.DIVIDER_HEIGHT_POSTINGBOARD,\n                0, ContextCompat.getColor(context, R.color.recyclerDivider));\n\n        replyList = new ArrayList<>();\n        replyAdapter = BoardReplyAdapter.getInstance();\n        replyAdapter.setReplyAdapterListener(listener);\n        replyAdapter.initReplyAdapter(popupDropdownUtil, imageUtil, viewerId);\n    }\n\n    public void submitCommentList(List<DocumentSnapshot> commentList) {\n        mDiffer.submitList(Lists.newArrayList(Lists.newArrayList(commentList)));\n    }\n\n    static class ViewHolder extends RecyclerView.ViewHolder {\n        ItemviewBoardCommentBinding commentBinding;\n        SimpleDateFormat sdf = new SimpleDateFormat(\"yy.MM.dd HH:mm\", Locale.getDefault());\n\n        //public ViewHolder(View itemView) {\n        public ViewHolder(ItemviewBoardCommentBinding commentBinding) {\n            super(commentBinding.getRoot());\n            this.commentBinding = commentBinding;\n        }\n\n        TextView getUserNameView() { return commentBinding.tvCommentUser; }\n        ImageView getUserImageView() { return commentBinding.imgCommentUser; }\n        ImageView getOverflowView() { return commentBinding.imgOverflow; }\n        ImageView getSendReplyView() { return commentBinding.imgbtnSendReply; }\n        RecyclerView getRecyclerReplyView() { return commentBinding.recyclerviewReply; }\n        Button getLoadReplyButton() { return commentBinding.btnLoadReplies; }\n        SwitchCompat getSwitchReply() { return commentBinding.switchReply; }\n        EditText getReplyContent() { return commentBinding.etCommentReply; }\n\n        void bindCommentProfile(DocumentSnapshot doc) {\n            //commentBinding.tvCommentUser.setText(doc.getString(\"user_name\"));\n            commentBinding.tvCommentContent.setText(doc.getString(\"comment\"));\n            final Date date = doc.getDate(\"timestamp\");\n            if(date != null) commentBinding.tvCommentTimestamp.setText(sdf.format(date));\n            long cntReply = Objects.requireNonNull(doc.getLong(\"cnt_reply\"));\n            commentBinding.headerReplyCnt.setText(String.valueOf(cntReply));\n        }\n    }\n\n    @NonNull\n    @Override\n    public ViewHolder onCreateViewHolder(@NonNull ViewGroup parent, int viewType) {\n        ItemviewBoardCommentBinding commentBinding = ItemviewBoardCommentBinding.inflate(\n                LayoutInflater.from(context), parent, false);\n\n        commentBinding.etCommentReply.setOnFocusChangeListener((v, isFocused) -> {\n            if(isFocused) commentAdapterListener.notifyEditTextFocused(v);\n        });\n\n\n        return new ViewHolder(commentBinding);\n    }\n\n    @Override\n    public void onBindViewHolder(@NonNull ViewHolder holder, int position) {\n        DocumentSnapshot doc = mDiffer.getCurrentList().get(position);\n        holder.bindCommentProfile(doc);\n        setCommentUserProfile(holder, doc);\n        holder.getOverflowView().setOnClickListener(v -> showCommentPopupWindow(holder, doc));\n        holder.getSendReplyView().setOnClickListener(v -> uploadReplyToComment(holder, doc));\n        holder.getLoadReplyButton().setOnClickListener(v -> loadNextReplyList(doc));\n        holder.getSwitchReply().setOnCheckedChangeListener((v, b) -> setReplySwitch(holder, doc, b));\n    }\n\n    @Override\n    public void onBindViewHolder(@NonNull ViewHolder holder, int pos, @NonNull List<Object> payloads){\n        if(payloads.isEmpty()) super.onBindViewHolder(holder, pos, payloads);\n        else {\n            if(!holder.commentBinding.switchReply.isChecked()) return;\n            if((boolean)payloads.get(0)) {\n                holder.commentBinding.linearReply.setVisibility(View.GONE);\n                holder.commentBinding.switchReply.setChecked(false);\n            } else log.i(\"reply switch stay open\");\n        }\n    }\n\n    @Override\n    public int getItemCount() {\n        return mDiffer.getCurrentList().size();\n    }\n\n    private void loadNextReplyList(DocumentSnapshot doc) {\n        try {\n            final int cntReply = Objects.requireNonNull(doc.getLong(\"cnt_reply\")).intValue();\n            if (cntReply > replyAdapter.getItemCount()) replyAdapter.queryNextReply();\n            else commentAdapterListener.notifyNoData();\n\n        } catch (NullPointerException e) {\n            e.printStackTrace();\n        }\n    }\n\n    private void setCommentUserProfile(ViewHolder holder, DocumentSnapshot doc) {\n        final String userId = doc.getString(\"user_id\");\n        final int x = holder.getUserImageView().getWidth();\n        final int y = holder.getUserImageView().getHeight();\n\n        final DocumentReference docref = mDB.collection(\"users\").document(Objects.requireNonNull(userId));\n        mDB.runTransaction((Transaction.Function<Void>) transaction -> {\n            DocumentSnapshot userDoc = transaction.get(docref);\n\n            String userName = userDoc.getString(\"user_name\");\n            holder.getUserNameView().setText(userName);\n\n            String userImage = userDoc.getString(\"user_pic\");\n            log.i(\"userImage: %s\", userImage);\n            Uri uri = (!TextUtils.isEmpty(userImage))?\n                    Uri.parse(userImage):Uri.parse(Constants.imgPath + \"ic_user_blnak_gray\");\n\n            holder.getUserImageView().post(() -> {\n                imageUtil.applyGlideToImageView(uri, holder.getUserImageView(), x, y, true);\n            });\n\n            return null;\n        });\n\n        /*\n        if(doc.getString(\"user_pic\") == null) {\n            String userId = doc.getString(\"user_id\");\n            assert userId != null;\n\n            final DocumentReference docref = mDB.collection(\"users\").document(userId);\n            mDB.runTransaction((Transaction.Function<Void>) transaction -> {\n                DocumentSnapshot userDoc = transaction.get(docref);\n                String userImage = userDoc.getString(\"user_pic\");\n\n                Uri imgUri;\n                if(userImage != null) {\n                    doc.getReference().update(\"user_pic\", userImage);\n                    imgUri = Uri.parse(userImage);\n                } else imgUri = Uri.parse(Constants.imgPath + \"ic_user_blnak_gray\");\n\n                imageUtil.applyGlideToImageView(imgUri, holder.getUserImageView(), x, y, true);\n                return null;\n            });\n\n        } else {\n            Uri uri = Uri.parse(doc.getString(\"user_pic\"));\n            imageUtil.applyGlideToImageView(uri, holder.getUserImageView(), x, y, true);\n        }\n\n         */\n\n    }\n\n    private void setReplySwitch(ViewHolder holder, DocumentSnapshot doc, boolean isChecked) {\n        if(isChecked) {\n            holder.commentBinding.linearReply.setVisibility(View.VISIBLE);\n            cntReply = Objects.requireNonNull(doc.getLong(\"cnt_reply\"));\n            if(cntReply > 0) {\n                LinearLayoutManager layoutManager = new LinearLayoutManager(context, LinearLayoutManager.VERTICAL, false);\n                holder.getRecyclerReplyView().setLayoutManager(layoutManager);\n                holder.getRecyclerReplyView().addItemDecoration(divider);\n                holder.getRecyclerReplyView().setHasFixedSize(false);\n                holder.getRecyclerReplyView().setItemAnimator(new DefaultItemAnimator());\n                holder.getRecyclerReplyView().setAdapter(replyAdapter);\n                replyAdapter.queryCommentReply(doc.getReference(), \"timestamp\");\n            }\n\n            // Visibility controll for the switch button to load more replies.\n            int visible = (cntReply > BoardActivity.PAGING_REPLY) ? View.VISIBLE : View.GONE;\n            holder.commentBinding.btnLoadReplies.setVisibility(visible);\n\n            // On-off control for the switch button.\n            //if(currentChecked != holder.getBindingAdapterPosition()){\n            commentAdapterListener.notifyReplySwitchChecked(holder.getBindingAdapterPosition());\n            //}\n            //currentChecked = holder.getBindingAdapterPosition();\n        } else holder.commentBinding.linearReply.setVisibility(View.GONE);\n    }\n\n    private void uploadReplyToComment(ViewHolder holder, DocumentSnapshot commentshot) {\n        String content = holder.commentBinding.etCommentReply.getText().toString();\n        if(TextUtils.isEmpty(content)) {\n            Snackbar.make(holder.commentBinding.getRoot(), \"no content\", Snackbar.LENGTH_SHORT).show();\n            return;\n        }\n\n        Map<String, Object> object = new HashMap<>();\n        object.put(\"user_id\", viewerId);\n        object.put(\"timestamp\", FieldValue.serverTimestamp());\n        object.put(\"reply_content\", content);\n\n        final DocumentReference docref = mDB.collection(\"users\").document(viewerId);\n        mDB.runTransaction((Transaction.Function<Void>) transaction -> {\n            DocumentSnapshot doc = transaction.get(docref);\n            List<?> userNames = (List<?>)doc.get(\"user_names\");\n            if(userNames != null) {\n                String userName = (String)userNames.get(0);\n                object.put(\"user_name\", userName);\n                object.put(\"user_pic\", doc.getString(\"user_pic\"));\n            }\n\n            WriteBatch batch = mDB.batch();\n            DocumentReference replyRef = commentshot.getReference().collection(\"replies\").document();\n            batch.set(replyRef, object);\n\n            DocumentReference commentRef = commentshot.getReference();\n            commentRef.update(\"cnt_reply\", FieldValue.increment(1));\n\n            batch.commit().addOnSuccessListener(Void -> {\n                cntReply++;\n                holder.commentBinding.headerReplyCnt.setText(String.valueOf(cntReply));\n                holder.commentBinding.etCommentReply.clearFocus();\n                holder.commentBinding.etCommentReply.getText().clear();\n\n                replyRef.get().addOnSuccessListener(snapshot -> {\n                    replyList.add(0, snapshot);\n                    replyAdapter.submitReplyList(replyList);\n                });\n                //replyList.add(0, replyRef.get().getResult());\n                //replyAdapter.submitReplyList(replyList);\n            }).addOnFailureListener(Throwable::printStackTrace);\n\n\n            /*\n            commentshot.getReference().collection(\"replies\").add(object).addOnSuccessListener(aVoid -> {\n                //replyAdapter.queryCommentReply(commentshot.getReference(), \"timestamp\");\n                commentAdapterListener.notifyUploadReplyDone(holder.getBindingAdapterPosition(), true);\n                holder.commentBinding.etCommentReply.clearFocus();\n                holder.commentBinding.etCommentReply.getText().clear();\n\n                commentshot.getReference().update(\"cnt_reply\", FieldValue.increment(1))\n                        .addOnSuccessListener(bVoid -> {\n                            cntReply++;\n                            holder.commentBinding.headerReplyCnt.setText(String.valueOf(cntReply));\n                        });\n            }).addOnFailureListener(e -> {\n                e.printStackTrace();\n                commentAdapterListener.notifyUploadReplyDone(holder.getBindingAdapterPosition(), false);\n            });\n\n             */\n\n            return null;\n        });\n    }\n\n    private void showCommentPopupWindow(ViewHolder holder, DocumentSnapshot doc) {\n        ViewGroup rootView = holder.commentBinding.getRoot();\n        LayoutInflater inflater = LayoutInflater.from(rootView.getContext());\n        View view = inflater.inflate(R.layout.popup_window_overflow, rootView, false);\n\n        popupDropdownUtil.setInitParams(view, holder.getOverflowView(), -45, -25);\n        PopupWindow dropdown = popupDropdownUtil.createPopupWindow();\n        PopupWindowOverflowBinding binding = PopupWindowOverflowBinding.bind(view);\n\n        if(viewerId.equals(doc.getString(\"user_id\"))) {\n            binding.relativePopupDel.setVisibility(View.VISIBLE);\n            binding.tvPopupDel.setOnClickListener(v ->\n                doc.getReference().delete().addOnSuccessListener(aVoid -> {\n                    commentList.remove(holder.getBindingAdapterPosition());\n                    submitCommentList(commentList);\n                    commentAdapterListener.deleteComment(doc);\n                    dropdown.dismiss();\n                }).addOnFailureListener(Throwable::printStackTrace));\n        }\n\n        binding.tvPopupShare.setOnClickListener(v -> {\n            dropdown.dismiss();\n        });\n        binding.tvPopupReport.setOnClickListener(v -> {\n            dropdown.dismiss();\n        });\n    }\n\n    private static final DiffUtil.ItemCallback<DocumentSnapshot> DIFF_CALLBACK_COMMENT =\n            new DiffUtil.ItemCallback<DocumentSnapshot>() {\n\n        @Override\n        public boolean areItemsTheSame(@NonNull DocumentSnapshot oldshot, @NonNull DocumentSnapshot newshot) {\n            return oldshot.getId().equals(newshot.getId());\n        }\n        @Override\n        public boolean areContentsTheSame(@NonNull DocumentSnapshot oldshot, @NonNull DocumentSnapshot newshot) {\n            return oldshot.equals(newshot);\n        }\n        public Object getChangePayload(@NonNull DocumentSnapshot oldshot, @NonNull DocumentSnapshot newshot) {\n            return super.getChangePayload(oldshot, newshot);\n        }\n    };\n\n    // RecyclerView Adapter for the comment reply.\n    /*\n    public static class CommentReplyAdapter extends RecyclerView.Adapter<CommentReplyAdapter.ViewHolder> {\n        private CommentAdapterListener callback;\n        private DocumentReference commentRef;\n        private List<DocumentSnapshot> replyList;\n        private ApplyImageResourceUtil imgutil;\n        private PopupDropdownUtil popupDropdownUtil;\n        private String viewerId;\n\n        // static instance using the lazy holder class.\n        private CommentReplyAdapter(){}\n        private static class InnerClazz {\n            private static final CommentReplyAdapter sInstance = new CommentReplyAdapter();\n        }\n        public static CommentReplyAdapter getInstance() {\n            return InnerClazz.sInstance;\n        }\n\n        public void setReplyInitParams(\n                PopupDropdownUtil dropdownUtil, ApplyImageResourceUtil imgutil, String viewerId) {\n            this.popupDropdownUtil = dropdownUtil;\n            this.imgutil = imgutil;\n            this.viewerId = viewerId;\n        }\n        \n        public void setReplyAdapterListener(CommentAdapterListener callback) {\n            this.callback = callback;\n        }\n\n        public static class ViewHolder extends RecyclerView.ViewHolder {\n            ItemviewBoardReplyBinding replyBinding;\n            public ViewHolder(View replyView) {\n                super(replyView);\n                replyBinding = ItemviewBoardReplyBinding.bind(replyView);\n            }\n\n            ImageView getReplyUserImage() { return replyBinding.imgReplyUser; }\n            ImageView getOverflowView() { return replyBinding.imgReplyOverflow; }\n\n            void setReplyProfile(DocumentSnapshot doc) {\n                replyBinding.tvUserName.setText(doc.getString(\"user_name\"));\n                replyBinding.tvReplyTimestamp.setText(String.valueOf(doc.getDate(\"timestamp\")));\n                replyBinding.tvReplyContent.setText(doc.getString(\"reply_content\"));\n            }\n        }\n\n        @NonNull\n        @Override\n        public ViewHolder onCreateViewHolder(@NonNull ViewGroup parent, int viewType) {\n            View replyView = LayoutInflater.from(parent.getContext()).inflate(\n                    R.layout.itemview_board_reply, parent, false);\n            return new ViewHolder(replyView);\n        }\n\n        @Override\n        public void onBindViewHolder(@NonNull CommentReplyAdapter.ViewHolder holder, int position) {\n            final DocumentSnapshot doc = replyList.get(position);\n            holder.setReplyProfile(doc);\n            setReplyUserPic(holder, doc);\n            holder.getOverflowView().setOnClickListener(view ->\n                    showReplyPopupWindow(view, holder, doc, position));\n        }\n\n        @Override\n        public int getItemCount() {\n            return replyList.size();\n        }\n\n        public void setCommentReplyList(DocumentReference commentRef) {\n            replyList = new ArrayList<>();\n            this.commentRef = commentRef;\n            commentRef.collection(\"replies\").get().addOnSuccessListener(replyShot -> {\n                for(DocumentSnapshot doc : replyShot) replyList.add(doc);\n            });\n        }\n\n        private void setReplyUserPic(ViewHolder holder, DocumentSnapshot doc) {\n            final String imgurl = (!TextUtils.isEmpty(doc.getString(\"user_pic\")))?\n                    doc.getString(\"user_pic\") : Constants.imgPath + \"ic_user_blank_gray\";\n            int x = holder.getReplyUserImage().getWidth();\n            int y = holder.getReplyUserImage().getHeight();\n            imgutil.applyGlideToImageView(Uri.parse(imgurl), holder.getReplyUserImage(), x, y, true);\n        }\n\n        private void showReplyPopupWindow(View view, ViewHolder holder, DocumentSnapshot doc, int pos){\n            LayoutInflater inflater = LayoutInflater.from(view.getContext());\n            View contentView = inflater.inflate(\n                    R.layout.popup_comment_overflow, holder.replyBinding.getRoot(), false);\n            popupDropdownUtil.setInitParams(contentView, holder.getOverflowView(), doc);\n            PopupWindow dropdown = popupDropdownUtil.createPopupWindow();\n\n            PopupCommentOverflowBinding popupBinding = PopupCommentOverflowBinding.bind(contentView);\n            if(viewerId.equals(doc.getString(\"user_id\"))) {\n                popupBinding.tvPopup1.setVisibility(View.VISIBLE);\n                popupBinding.tvPopup1.setOnClickListener(v -> {\n                    callback.deleteCommentReply(this, commentRef.getId(), doc.getId(), pos);\n                    dropdown.dismiss();\n                });\n            }\n\n            popupBinding.tvPopup2.setOnClickListener(v -> {\n                log.i(\"menu2\");\n                dropdown.dismiss();\n            });\n            popupBinding.tvPopup3.setOnClickListener(v -> {\n                log.i(\"menu3\");\n                dropdown.dismiss();\n            });\n        }\n    }\n    */\n\n    // The comment and reply overflow event handler\n    /*\n    private void showListPopupWindow(ViewHolder holder, DocumentSnapshot doc) {\n        //ListPopupWindow\n        int[] size = measurePopupContentSize(arrayCommentAdapter);\n        log.i(\"content size: %s, %s\", size[0], size[1]);\n        popupWindow = new ListPopupWindow(context);\n        popupWindow.setAnchorView(holder.getOverflowView());\n        popupWindow.setHeight(220);\n        popupWindow.setContentWidth(180);\n        popupWindow.setHorizontalOffset(-160);\n        Drawable background = ContextCompat.getDrawable(context, android.R.drawable.editbox_background);\n        popupWindow.setBackgroundDrawable(background);\n        popupWindow.setModal(true);\n        popupWindow.setOnItemClickListener((parent, view, i, l) -> {\n            log.i(\"click\");\n        });\n        popupWindow.setAdapter(arrayCommentAdapter);\n        popupWindow.show();\n\n        // PopupWindow\n        LayoutInflater inflater = LayoutInflater.from(context);\n        View view = inflater.inflate(R.layout.popup_comment_overflow, holder.commentBinding.getRoot(), false);\n        PopupWindow dropdown = new PopupWindow(view,\n                LinearLayout.LayoutParams.WRAP_CONTENT, LinearLayout.LayoutParams.WRAP_CONTENT);\n\n        Drawable background = ContextCompat.getDrawable(context, android.R.drawable.editbox_background);\n        dropdown.setBackgroundDrawable(background);\n        dropdown.showAsDropDown(holder.getOverflowView(), -120, -20);\n        dropdown.setOverlapAnchor(true);\n        dropdown.setOutsideTouchable(true);\n        dropdown.update();\n\n        // TextView event Listener\n        PopupCommentOverflowBinding popupBinding = PopupCommentOverflowBinding.bind(view);\n        if(viewerId.equals(doc.getString(\"user_id\"))) {\n            log.i(\"remove document\");\n            popupBinding.tvPopup1.setVisibility(View.VISIBLE);\n            popupBinding.tvPopup1.setOnClickListener(v -> {\n                log.i(\"remove listener\");\n                commentListener.deleteComment(doc.getId());\n                dropdown.dismiss();\n            });\n        }\n\n        popupBinding.tvPopup2.setOnClickListener(v -> {\n            log.i(\"menu2\");\n            dropdown.dismiss();\n        });\n        popupBinding.tvPopup3.setOnClickListener(v -> {\n            log.i(\"menu3\");\n            dropdown.dismiss();\n        });\n\n        // PopupMenu\n        final String commentId = comment.getId();\n        final String ownerId = comment.getString(\"user_id\");\n\n        PopupMenu popupMenu = new PopupMenu(styleWrapper, holder.getOverflowView());\n        popupMenu.getMenuInflater().inflate(R.menu.popup_board_comment, popupMenu.getMenu());\n\n        boolean visible = ownerId != null && ownerId.equals(viewerId);\n        popupMenu.getMenu().findItem(R.id.board_comment_delete).setVisible(visible);\n\n        popupMenu.setOnMenuItemClickListener(menuItem -> {\n            if(menuItem.getItemId() == R.id.board_comment_delete) {\n                commentListener.deleteComment(commentId, position);\n\n            } else if(menuItem.getItemId() == R.id.board_comment_report) {\n                log.i(\"popup report\");\n\n            } else if(menuItem.getItemId() == R.id.board_comment_share) {\n                log.i(\"popup share\");\n            }\n\n            return false;\n        });\n        popupMenu.show();\n\n    }\n\n     */\n\n    /*\n    private int[] measurePopupContentSize(ListAdapter adapter) {\n        ViewGroup mMeasureParent = null;\n        View itemView = null;\n        int maxWidth = 0;\n        int maxHeight = 0;\n        int itemType = 0;\n        int totalHeight = 0;\n        final int widthMeasureSpec = View.MeasureSpec.makeMeasureSpec(0, View.MeasureSpec.UNSPECIFIED);\n        final int heightMeasureSpec = View.MeasureSpec.makeMeasureSpec(0, View.MeasureSpec.UNSPECIFIED);\n        final int num = adapter.getCount();\n\n        for(int i = 0; i < num; i++) {\n            final int positionType = adapter.getItemViewType(i);\n            if(positionType != itemType) {\n                itemType = positionType;\n                itemView = null;\n            }\n\n            if(mMeasureParent == null) mMeasureParent = new FrameLayout(context);\n\n            itemView = adapter.getView(i, itemView, mMeasureParent);\n            itemView.measure(widthMeasureSpec, heightMeasureSpec);\n            final int itemWidth = itemView.getMeasuredWidth();\n            final int itemHeight = itemView.getMeasuredHeight();\n            if(itemWidth > maxWidth) maxWidth = itemWidth;\n            if(itemHeight > maxHeight) maxHeight = itemHeight;\n\n            totalHeight += itemHeight;\n        }\n        log.i(\"total Height: %s\", totalHeight);\n        return new int[] {maxWidth, maxHeight * adapter.getCount()};\n    }\n\n     */\n\n\n}\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/com/silverback/carman/adapters/BoardCommentAdapter.java b/app/src/main/java/com/silverback/carman/adapters/BoardCommentAdapter.java
--- a/app/src/main/java/com/silverback/carman/adapters/BoardCommentAdapter.java	
+++ b/app/src/main/java/com/silverback/carman/adapters/BoardCommentAdapter.java	
@@ -151,7 +151,8 @@
 
     @Override
     public void onBindViewHolder(@NonNull ViewHolder holder, int position) {
-        DocumentSnapshot doc = mDiffer.getCurrentList().get(position);
+        //DocumentSnapshot doc = mDiffer.getCurrentList().get(position);
+        DocumentSnapshot doc = commentList.get(position);
         holder.bindCommentProfile(doc);
         setCommentUserProfile(holder, doc);
         holder.getOverflowView().setOnClickListener(v -> showCommentPopupWindow(holder, doc));
@@ -174,7 +175,8 @@
 
     @Override
     public int getItemCount() {
-        return mDiffer.getCurrentList().size();
+        return commentList.size();
+        //return mDiffer.getCurrentList().size();
     }
 
     private void loadNextReplyList(DocumentSnapshot doc) {
Index: app/src/main/java/com/silverback/carman/fragments/BoardReadFragment.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>/*\n * Copyright (C) 2012 The Carman Project\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\npackage com.silverback.carman.fragments;\n\nimport static android.content.Context.INPUT_METHOD_SERVICE;\nimport static com.silverback.carman.BoardActivity.AUTOCLUB;\nimport static com.silverback.carman.BoardActivity.PAGING_COMMENT;\n\nimport android.app.Dialog;\nimport android.content.Context;\nimport android.content.DialogInterface;\nimport android.content.Intent;\nimport android.content.SharedPreferences;\nimport android.net.Uri;\nimport android.os.Bundle;\nimport android.text.SpannableString;\nimport android.text.SpannableStringBuilder;\nimport android.text.Spanned;\nimport android.text.TextUtils;\nimport android.text.style.AbsoluteSizeSpan;\nimport android.view.LayoutInflater;\nimport android.view.MenuItem;\nimport android.view.View;\nimport android.view.ViewGroup;\nimport android.view.Window;\nimport android.view.inputmethod.InputMethodManager;\nimport android.widget.CompoundButton;\nimport android.widget.ImageView;\nimport android.widget.LinearLayout;\nimport android.widget.TextView;\nimport android.widget.Toast;\n\nimport androidx.activity.result.ActivityResult;\nimport androidx.activity.result.ActivityResultLauncher;\nimport androidx.activity.result.contract.ActivityResultContracts;\nimport androidx.annotation.NonNull;\nimport androidx.appcompat.widget.Toolbar;\nimport androidx.constraintlayout.widget.ConstraintLayout;\nimport androidx.constraintlayout.widget.ConstraintSet;\nimport androidx.core.content.ContextCompat;\nimport androidx.fragment.app.DialogFragment;\nimport androidx.fragment.app.FragmentManager;\nimport androidx.lifecycle.ViewModelProvider;\nimport androidx.preference.PreferenceManager;\nimport androidx.recyclerview.widget.DefaultItemAnimator;\nimport androidx.recyclerview.widget.LinearLayoutManager;\n\nimport com.bumptech.glide.Glide;\nimport com.bumptech.glide.load.engine.DiskCacheStrategy;\nimport com.google.android.material.appbar.AppBarLayout;\nimport com.google.android.material.snackbar.Snackbar;\nimport com.google.firebase.firestore.DocumentReference;\nimport com.google.firebase.firestore.DocumentSnapshot;\nimport com.google.firebase.firestore.FieldValue;\nimport com.google.firebase.firestore.FirebaseFirestore;\nimport com.google.firebase.firestore.QuerySnapshot;\nimport com.google.firebase.firestore.WriteBatch;\nimport com.google.firebase.storage.FirebaseStorage;\nimport com.silverback.carman.BoardActivity;\nimport com.silverback.carman.R;\nimport com.silverback.carman.SettingActivity;\nimport com.silverback.carman.adapters.BoardCommentAdapter;\nimport com.silverback.carman.adapters.BoardReplyAdapter;\nimport com.silverback.carman.databinding.FragmentBoardReadBinding;\nimport com.silverback.carman.logs.LoggingHelper;\nimport com.silverback.carman.logs.LoggingHelperFactory;\nimport com.silverback.carman.utils.ApplyImageResourceUtil;\nimport com.silverback.carman.utils.Constants;\nimport com.silverback.carman.postingboard.CustomPostingObject;\nimport com.silverback.carman.postingboard.QueryPostPagingUtil;\nimport com.silverback.carman.utils.RecyclerDividerUtil;\nimport com.silverback.carman.viewmodels.FragmentSharedModel;\nimport com.silverback.carman.viewmodels.ImageViewModel;\n\nimport org.json.JSONArray;\nimport org.json.JSONException;\n\nimport java.text.SimpleDateFormat;\nimport java.util.ArrayList;\nimport java.util.Date;\nimport java.util.HashMap;\nimport java.util.List;\nimport java.util.Locale;\nimport java.util.Map;\nimport java.util.regex.Matcher;\nimport java.util.regex.Pattern;\n\npublic class BoardReadFragment extends DialogFragment implements\n        View.OnClickListener,\n        Toolbar.OnMenuItemClickListener,\n        CompoundButton.OnCheckedChangeListener,\n        BoardCommentAdapter.CommentAdapterListener,\n        QueryPostPagingUtil.OnQueryPostPagingCallback {\n\n    private static final LoggingHelper log = LoggingHelperFactory.create(BoardReadFragment.class);\n\n    // Constants\n    private static final int STATE_COLLAPSED = 0;\n    private static final int STATE_EXPANDED = 1;\n    private static final int STATE_IDLE = 2;\n\n    // Objects\n    //private Context context;\n    private CustomPostingObject toObject;\n    private QueryPostPagingUtil queryPaginationUtil;\n    private SharedPreferences mSettings;\n    private FirebaseFirestore mDB;\n    private FirebaseStorage storage;\n    private DocumentReference postRef;\n    private ApplyImageResourceUtil imgUtil;\n    private ImageViewModel imgViewModel;\n    private FragmentSharedModel sharedModel;\n\n    private BoardCommentAdapter commentAdapter;\n    private BoardReplyAdapter replyAdapter;\n\n    private List<DocumentSnapshot> commentShotList;\n    private List<DocumentSnapshot> replyShotList;\n\n    private ArrayList<String> uriStringList, autofilter;\n\n    private InputMethodManager imm;\n    // UIs\n    private FragmentBoardReadBinding binding;\n    // Fields\n    private SpannableStringBuilder autoTitle;\n    private String tabTitle;\n    private String documentId;\n    private String postOwnerId, viewerId;\n    private String userPic;\n    private int tabPage;\n    private int position; // item poistion in the recyclerview.\n    private int checkedPos;\n    private int appbarOffset;\n    private int cntComment, cntCompathy;\n    private boolean isCommentVisible;\n    private boolean hasCompathy;\n    //private boolean isLoading;\n\n    // Interface for notifying BoardActivity of pressing the edit menu in the toolbar which is visible\n    // only when a user reads his/her own post\n    /*\n    public interface OnEditModeListener {\n        void onEditClicked(Bundle bundle);\n    }\n    // Interface for listening to BoardActivity at the lifecycle of onAttachFragment.\n    public void setEditModeListener(OnEditModeListener listener) {\n        mListener = listener;\n    }\n     */\n    // Constructor default.\n    public BoardReadFragment() {\n        // Required empty public constructor\n    }\n\n    final ActivityResultLauncher<Intent> activityResultLauncher = registerForActivityResult(\n                new ActivityResultContracts.StartActivityForResult(), this::getActivityResultCallback);\n\n    @Override\n    public void onCreate(Bundle savedInstanceState) {\n        super.onCreate(savedInstanceState);\n        if(getArguments() != null) {\n            toObject = getArguments().getParcelable(\"postingObj\");\n            assert toObject != null;\n            tabPage = getArguments().getInt(\"tabPage\");\n            position = getArguments().getInt(\"position\");\n            documentId = getArguments().getString(\"documentId\");\n            postOwnerId = toObject.getUserId();\n            cntComment = toObject.getCntComment();\n            cntCompathy = toObject.getCntCompahty();\n            if(toObject.getPostImages() != null) uriStringList = new ArrayList<>(toObject.getPostImages());\n            if(toObject.getAutofilter() != null) autofilter = new ArrayList<>(toObject.getAutofilter());\n        }\n\n        //this.context = requireContext();\n        // Get the viewer id for checking whether the post owner is the viewer\n        viewerId = ((BoardActivity)requireActivity()).getUserId();\n\n        mDB = FirebaseFirestore.getInstance();\n        storage = FirebaseStorage.getInstance();\n        mSettings = PreferenceManager.getDefaultSharedPreferences(requireActivity());\n        imgUtil = new ApplyImageResourceUtil(requireActivity());\n        imm = (InputMethodManager)requireActivity().getSystemService(INPUT_METHOD_SERVICE);\n\n        queryPaginationUtil = new QueryPostPagingUtil(mDB, this);\n        commentShotList = new ArrayList<>();\n        commentAdapter = new BoardCommentAdapter(getContext(), commentShotList, viewerId, this);\n        postRef = mDB.collection(\"user_post\").document(documentId);\n\n        // defined in getFirstQueryResult() instead of initially loading the comment.\n        //queryPaginationUtil.setCommentQuery(postRef, \"timestamp\");\n    }\n\n    @Override\n    public View onCreateView(@NonNull LayoutInflater inflater, ViewGroup container,\n                             Bundle savedInstanceState) {\n\n        binding = FragmentBoardReadBinding.inflate(inflater);\n        /*\n        requireActivity().getWindow().setSoftInputMode(WindowManager.LayoutParams.SOFT_INPUT_STATE_VISIBLE |\n                WindowManager.LayoutParams.SOFT_INPUT_ADJUST_RESIZE);\n         */\n        // Set the stand-alone toolabr which works in the same way that the action bar does in most\n        // cases, but you do not set the toolbar to act as the action bar. In standalone mode, you\n        // need to manually populate the toolbar with content and actions as follows. Also, the\n        // navigation icon(back arrow) should be handled in setToolbarTitleIcon().\n        binding.toolbarBoardRead.setNavigationOnClickListener(view -> dismiss());\n        tabTitle = getResources().getStringArray(R.array.board_tab_title)[tabPage];\n        autoTitle = ((BoardActivity)requireActivity()).getAutoClubTitle();\n\n        //setHasOptionsMenu(true);\n        // If the user is the owner of a post, display the edit menu in the toolbar, which should\n        // use MenuInflater and create menu dynimically. It seems onCreateOptionsMenu does not work\n        // in DialogFragment\n        if(toObject.getUserId() != null && toObject.getUserId().equals(viewerId)) {\n            //createEditOptionsMenu();\n            binding.toolbarBoardRead.inflateMenu(R.menu.options_board_read);\n            binding.toolbarBoardRead.setOnMenuItemClickListener(this);\n        }\n\n        binding.tvPostTitle.setText(toObject.getPostTitle());\n        binding.tvUsername.setText(toObject.getUserName());\n        binding.tvCntComment.setText(String.valueOf(cntComment));\n        binding.headerCommentCnt.setText(String.valueOf(cntComment));\n        binding.tvCntCompathy.setText(String.valueOf(cntCompathy));\n\n        SimpleDateFormat sdf = new SimpleDateFormat(\"yyyy.MM.dd HH:mm\", Locale.getDefault());\n        Date date = toObject.getTimestamp();\n        if(date != null) binding.tvPostingDate.setText(sdf.format(date.getTime()));\n\n        // It's required to have an option to whether the autodata should be visible or not.\n        if(autofilter != null) setPostAutoclub();\n        else binding.tvAutoinfo.setText(\"no autoclub joined\");\n\n\n        // RecyclerView for showing comments\n        LinearLayoutManager layout = new LinearLayoutManager(getContext(), LinearLayoutManager.VERTICAL, false);\n        RecyclerDividerUtil divider = new RecyclerDividerUtil(Constants.DIVIDER_HEIGHT_POSTINGBOARD,\n                0, ContextCompat.getColor(requireContext(), R.color.recyclerDivider));\n        binding.recyclerComments.setHasFixedSize(false); //due to banner plugin\n        binding.recyclerComments.setLayoutManager(layout);\n        binding.recyclerComments.addItemDecoration(divider);\n        binding.recyclerComments.setItemAnimator(new DefaultItemAnimator());\n        binding.recyclerComments.setAdapter(commentAdapter);\n        //setRecyclerViewScrollListener();\n        //binding.recyclerComments.addOnScrollListener(pagingUtil);\n\n        // Event handler for buttons\n        binding.switchComment.setOnCheckedChangeListener(this);\n        binding.imgbtnComment.setOnClickListener(this);\n        binding.imgbtnLoadComment.setOnClickListener(this);\n        binding.imgbtnCompathy.setOnClickListener(view -> setCompathyCount());\n        binding.imgbtnSendComment.setOnClickListener(this);\n        // Implements the abstract method of AppBarStateChangeListener to be notified of the state\n        // of appbarlayout as it is scrolling, which changes the toolbar title and icon by the\n        // scroling state.\n        binding.appbarBoardRead.addOnOffsetChangedListener(new AppBarStateChangeListener() {\n            @Override\n            public void onStateChanged(AppBarLayout appBarLayout, int state) {\n                setToolbarTitleIcon(state);\n            }\n        });\n\n        // RecyclerView.OnScrollListener() does not work if it is inside (Nested)ScrollView. To make\n        // it listen to scrolling, use the parent scollview listener.\n        /*\n        binding.nestedScrollview.setOnScrollChangeListener((NestedScrollView.OnScrollChangeListener)\n                (v, scrollX, scrollY, oldScrollX, oldScrollY) -> {\n                    if((scrollY >= (binding.recyclerComments.getMeasuredHeight() - v.getMeasuredHeight())\n                            && scrollY > oldScrollY)) {\n                        if(!isLoading) {\n                            isLoading = true;\n                            queryPaginationUtil.setNextPostQuery();\n                        }\n                    }\n                });\n        */\n\n        // Attach the user image in the header, if any, using Glide. Otherwise, the blank image\n        // is set.\n        userPic = (TextUtils.isEmpty(toObject.getUserPic()))?Constants.imgPath + \"ic_user_blank_gray\": toObject.getUserPic();\n        int size = Constants.ICON_SIZE_TOOLBAR_USERPIC;\n        imgUtil.applyGlideToImageView(Uri.parse(userPic), binding.imgUserpic, size, size, true);\n\n        // Rearrange the text by paragraphs\n        readContentView(getContext(), toObject.getPostContent());\n\n        return binding.getRoot();\n    }\n\n    @NonNull\n    @Override\n    public Dialog onCreateDialog(Bundle savedInstanceState) {\n        Dialog dialog = super.onCreateDialog(savedInstanceState);\n        dialog.requestWindowFeature(Window.FEATURE_NO_TITLE);\n        return dialog;\n    }\n\n    @Override\n    public void onViewCreated(@NonNull View view, Bundle savedInstanceState) {\n        super.onViewCreated(view, savedInstanceState);\n        log.i(\"onViewCreated\");\n        sharedModel = new ViewModelProvider(requireActivity()).get(FragmentSharedModel.class);\n        imgViewModel = new ViewModelProvider(requireActivity()).get(ImageViewModel.class);\n        // SET THE USER IMAGE ICON\n        // ImageViewModel receives a drawable as LiveData from ApplyImageResourceUtil.applyGlideToDrawable()\n        // in which Glide creates the custom target that translates an image fitting to a given\n        // size and returns a drawable.\n        imgViewModel.getGlideDrawableTarget().observe(this, drawable -> {\n            binding.toolbarBoardRead.setLogo(drawable);\n            binding.toolbarBoardRead.setContentInsetStartWithNavigation(0);\n        });\n\n        // If a post is the user's own one, the delete button appears on the toolbar. When tapping the\n        // button and picking the confirm button, FragmentSharedModel.getPostRemoved() notifies\n        // BoardPagerFragment that the user has deleted the post w/ the item position. To prevent\n        // the model from automatically invoking the method, initially set the value to false;\n    }\n\n    @Override\n    public void onResume() {\n        super.onResume();\n    }\n\n    @Override\n    public void onPause() {\n        super.onPause();\n    }\n\n    @Override\n    public void onDismiss(@NonNull DialogInterface dialog) {\n        log.i(\"onDismiss\");\n        super.onDismiss(dialog);\n    }\n\n    @Override\n    public void onDestroyView() {\n        super.onDestroyView();\n        binding = null;\n    }\n\n    @Override\n    public boolean onMenuItemClick(MenuItem menuItem) {\n        if(menuItem.getItemId() == R.id.action_board_edit) {\n            BoardEditFragment editFragment = new BoardEditFragment();\n            Bundle editBundle = new Bundle();\n            editBundle.putString(\"documentId\", documentId);\n            editBundle.putString(\"postTitle\", toObject.getPostTitle());\n            editBundle.putString(\"postContent\", toObject.getPostContent());\n            editBundle.putInt(\"position\", position);\n            if (uriStringList != null && uriStringList.size() > 0) {\n                editBundle.putStringArrayList(\"uriImgList\", uriStringList);\n            }\n\n            if(autofilter != null && autofilter.size() > 0){\n                editBundle.putStringArrayList(\"autofilter\", autofilter);\n            }\n\n            editFragment.setArguments(editBundle);\n            requireActivity().getSupportFragmentManager().beginTransaction()\n                    .addToBackStack(null)\n                    .replace(android.R.id.content, editFragment)\n                    .commit();\n            dismiss();\n            return true;\n\n        } else if(menuItem.getItemId() == R.id.action_board_delete) {\n            String title = getString(R.string.board_alert_delete);\n            String msg = getString(R.string.board_alert_msg);\n            DialogFragment fragment = CustomDialogFragment.newInstance(title, msg, Constants.BOARD);\n            FragmentManager fragmentManager = getChildFragmentManager();\n\n            fragmentManager.setFragmentResultListener(\"confirmDelete\", fragment, (req, res) -> {\n                if(req.matches(\"confirmDelete\") && (res.getBoolean(\"confirmed\"))) {\n                    postRef.delete().addOnSuccessListener(aVoid -> {\n                        dismiss();\n                    }).addOnFailureListener(Throwable::printStackTrace);\n                }\n            });\n\n            fragment.show(fragmentManager, \"alert\");\n            return true;\n        }\n\n        return false;\n    }\n\n    // Handler for SwitchCompat that controls the visibility of the comment recyclerview\n    @Override\n    public void onCheckedChanged(CompoundButton compoundButton, boolean isChecked) {\n        if(isChecked) {\n            //queryPaginationUtil.setCommentQuery(postRef);\n            binding.recyclerComments.setVisibility(View.VISIBLE);\n            int visible = (cntComment > PAGING_COMMENT) ? View.VISIBLE : View.GONE;\n\n            binding.imgbtnLoadComment.setVisibility(visible);\n            if(cntComment > PAGING_COMMENT) binding.imgbtnLoadComment.setVisibility(View.VISIBLE);\n            else binding.imgbtnLoadComment.setVisibility(View.GONE);\n\n            queryPaginationUtil.setCommentQuery(postRef, \"timestamp\");\n            /*\n            binding.nestedScrollview.post(() ->\n                    binding.nestedScrollview.smoothScrollTo(0, View.FOCUS_DOWN, 1000));\n            */\n        } else {\n            //commentAdapter.notifyItemRangeRemoved(0, commentShotList.size());\n            //commentShotList.clear();\n            binding.recyclerComments.setVisibility(View.GONE);\n            //binding.nestedScrollview.post(() -> binding.nestedScrollview.fullScroll(View.FOCUS_UP));\n        }\n    }\n\n    @Override\n    public void onClick(View v) {\n        if(v.getId() == R.id.imgbtn_comment) {\n            // Check whether a user name is set. Otherwise, show an messagie in the snackbar to\n            // move to SettingPrefActivity to make a user name.\n            if(checkUserName()) {\n                log.i(\"comment button: %s\", isCommentVisible);\n                int visibility = isCommentVisible ? View.GONE : View.VISIBLE;\n                binding.constraintComment.setVisibility(visibility);\n                binding.etComment.getText().clear();\n\n                if(!isCommentVisible) {\n                    binding.etComment.requestFocus();\n                    commentAdapter.notifyItemChanged(checkedPos, true);\n                    binding.nestedScrollview.post(() ->\n                            binding.nestedScrollview.smoothScrollTo(0, View.FOCUS_DOWN, 1000));\n                    //binding.nestedScrollview.scrollTo(0, View.FOCUS_DOWN);\n                } else imm.hideSoftInputFromWindow(binding.getRoot().getWindowToken(), 0);\n\n                isCommentVisible = !isCommentVisible;\n            }\n\n        } else if(v.getId() == R.id.imgbtn_send_comment) {\n            if(TextUtils.isEmpty(binding.etComment.getText())) {\n                Snackbar.make(binding.getRoot(), getString(R.string.board_msg_no_comment), Snackbar.LENGTH_SHORT).show();\n            } else uploadPostComment();\n\n        } else if(v.getId() == R.id.imgbtn_load_comment) {\n            log.i(\"add more comments\");\n            if(cntComment > commentAdapter.getItemCount()) queryPaginationUtil.setNextCommentQuery();\n            else notifyNoData();\n        }\n    }\n\n    // Implement QueryPostPagingUtil.OnQueryPostPagingCallback overriding the follwoing methods\n    // to show comments on the post by the pagination.\n    @Override\n    public void getFirstQueryResult(QuerySnapshot commentShots) {\n        commentShotList.clear();\n        for(DocumentSnapshot comment : commentShots) commentShotList.add(comment);\n        //commentAdapter.notifyItemRangeChanged(0, commentShots.size());\n        //int scrollY = binding.nestedScrollview.getHeight();\n        //binding.nestedScrollview.post(() -> binding.nestedScrollview.smoothScrollTo(0, View.FOCUS_DOWN, 1000));\n        commentAdapter.submitCommentList(commentShotList);\n    }\n\n    @Override\n    public void getNextQueryResult(QuerySnapshot nextShots) {\n        //final int start = commentShotList.size();\n        for(DocumentSnapshot comment : nextShots) commentShotList.add(comment);\n        //commentAdapter.notifyItemRangeChanged(start, nextShots.size());\n        //int scrollY = binding.nestedScrollview.getHeight();\n        //binding.nestedScrollview.post(() -> binding.nestedScrollview.smoothScrollTo(0, scrollY, 1000));\n        commentAdapter.submitCommentList(commentShotList);\n    }\n\n    @Override\n    public void getLastQueryResult(QuerySnapshot lastShots) {\n        final int start = commentShotList.size();\n        for(DocumentSnapshot comment : lastShots) commentShotList.add(comment);\n        //commentAdapter.notifyItemRangeChanged(start, lastShots.size());\n        //int scrollY = binding.nestedScrollview.getHeight();\n        //binding.nestedScrollview.post(() -> binding.nestedScrollview.smoothScrollTo(0, scrollY, 1000));\n        commentAdapter.submitCommentList(commentShotList);\n    }\n\n    @Override\n    public void getQueryErrorResult(Exception e) {\n        Toast.makeText(getActivity(), e.getMessage(), Toast.LENGTH_SHORT).show();\n    }\n\n    // The BoardCommentAdapter.CommentAdapterListener interface impelemts the following methods\n    // deleteComment(): may delete a comment as long as the reader is the owner of a comment.\n    // deleteCommentReply(): may delete a reply as long as the reader is the owner of a reply.\n    // addCommentReply(): may add a comment\n    // notifyReplyChecked(): notified of whether the switch button turns on or off.\n    @Override\n    public void deleteComment(DocumentSnapshot doc) {\n        postRef.update(\"cnt_comment\", FieldValue.increment(-1)).addOnSuccessListener(bVoid -> {\n            cntComment --;\n            if(cntComment <= PAGING_COMMENT) binding.imgbtnLoadComment.setVisibility(View.GONE);\n            binding.tvCntComment.setText(String.valueOf(cntComment));\n            binding.headerCommentCnt.setText(String.valueOf(cntComment));\n\n        }).addOnFailureListener(Throwable::printStackTrace);\n    }\n\n\n    @Override\n    public void deleteCommentReply(BoardReplyAdapter replyAdapter, DocumentReference commentRef) {\n\n        commentRef.update(\"cnt_reply\", FieldValue.increment(-1)).addOnSuccessListener(aVoid -> {\n            log.i(\"post deletion handling\");\n        });\n        //final DocumentReference commentRef = postRef.collection(\"comments\").document(commentId);\n\n\n    }\n\n    @Override\n    public void notifyUploadReplyDone(int pos, boolean isDone) {\n        if(imm.isActive()) imm.hideSoftInputFromWindow(binding.getRoot().getWindowToken(), 0);\n        String msg = (isDone)?\"uploading reply done\" : \"uploading reply failed\";\n        Snackbar.make(binding.getRoot(), msg, Snackbar.LENGTH_SHORT).show();\n        //commentAdapter.notifyItemChanged(position, false);\n    }\n\n    @Override\n    public void notifyNoData() {\n        Snackbar.make(binding.getRoot(), \"No more replies\", Snackbar.LENGTH_SHORT).show();\n    }\n\n    @Override\n    public void notifyReplySwitchChecked(int bindingPos) {\n        if(imm.isActive()) imm.hideSoftInputFromWindow(binding.getRoot().getWindowToken(), 0);\n\n        if(binding.etComment.isFocused()) {\n            binding.constraintComment.setVisibility(View.GONE);\n            isCommentVisible = false;\n        }\n\n        // If a new reply feed switches on, the previous open feeld should be closed.\n        if(checkedPos != bindingPos) commentAdapter.notifyItemChanged(checkedPos, true);\n        this.checkedPos = bindingPos;\n\n        //binding.nestedScrollview.post(() -> binding.nestedScrollview.fullScroll(View.FOCUS_DOWN));\n        int scrollY = binding.nestedScrollview.getHeight();\n        binding.nestedScrollview.post(() -> binding.nestedScrollview.smoothScrollTo(0, scrollY, 1000));\n    }\n\n    @Override\n    public void notifyEditTextFocused(View view) {\n        if(!checkUserName()) view.clearFocus();\n        binding.nestedScrollview.post(() ->\n                binding.nestedScrollview.smoothScrollTo(0, View.FOCUS_DOWN, 1000));\n\n\n    }\n\n    private void getActivityResultCallback(ActivityResult result) {\n        log.i(\"activity result: %s\", result.getData());\n        if(result.getData() != null) log.i(\"user name:\");\n    }\n\n    // Make up the text-based content and any image attached in ConstraintLayout which is dynamically\n    // created by ConstraintSet. Images should be managed by Glide.\n    // The regular expression makes text and images split with the markup which was inserted when images\n    // were created. While looping the content, split parts of text and image are conntected by\n    // ConstraintSets which are applied to the parent ConstraintLayout.\n    // The recyclerview which displays comments at the bottom should be coordinated according to\n    // whether the content has images or not.\n    private void readContentView(Context context, String content) {\n        // When an image is attached as the post writes, the line separator is supposed to put in at\n        // before and after the image. That's why the regex contains the line separator in order to\n        // get the right end position.\n        final String REGEX_MARKUP = \"\\\\[image_\\\\d]\";\n        final Matcher m = Pattern.compile(REGEX_MARKUP).matcher(content);\n        final ConstraintLayout parent = binding.constraintPosting;\n\n        int index = 0;\n        int start = 0;\n        int target;\n        int prevImageId = 0;\n\n        // Create LayoutParams using LinearLayout(RelativeLayout).LayoutParams, not using Constraint\n        // Layout.LayoutParams. WHY?\n        LinearLayout.LayoutParams params = new LinearLayout.LayoutParams(\n                LinearLayout.LayoutParams.MATCH_PARENT, LinearLayout.LayoutParams.WRAP_CONTENT);\n\n        // If the content contains images, which means any markup(s) exists in the content, the content\n        // is split into parts of texts and images and respectively connected to ConstraintSet.\n        while(m.find()) {\n            // Check whether the content starts w/ text or image, which depends on the value of start.\n            String paragraph = content.substring(start, m.start());\n            TextView tv = new TextView(context);\n            tv.setId(View.generateViewId());\n            tv.setText(paragraph);\n            parent.addView(tv, params);\n            target = (start == 0) ? binding.guideline.getId() : prevImageId;\n\n            ConstraintSet tvSet = new ConstraintSet();\n            tvSet.clone(parent);\n            tvSet.connect(tv.getId(), ConstraintSet.START, parent.getId(), ConstraintSet.START, 16);\n            tvSet.connect(tv.getId(), ConstraintSet.END, parent.getId(), ConstraintSet.END, 16);\n            tvSet.connect(tv.getId(), ConstraintSet.TOP, target, ConstraintSet.BOTTOM, 16);\n            tvSet.applyTo(parent);\n\n            ImageView imgView = new ImageView(context);\n            imgView.setId(View.generateViewId());\n            prevImageId = imgView.getId();\n            parent.addView(imgView, params);\n\n            ConstraintSet imgSet = new ConstraintSet();\n            imgSet.clone(parent);\n            imgSet.connect(imgView.getId(), ConstraintSet.START, parent.getId(), ConstraintSet.START, 16);\n            imgSet.connect(imgView.getId(), ConstraintSet.END, parent.getId(), ConstraintSet.END, 16);\n            imgSet.connect(imgView.getId(), ConstraintSet.TOP, tv.getId(), ConstraintSet.BOTTOM, 0);\n            imgSet.applyTo(parent);\n\n            // Consider to apply Glide thumbnail() method.\n            Glide.with(context).asBitmap().load(uriStringList.get(index))\n                    .diskCacheStrategy(DiskCacheStrategy.AUTOMATIC).fitCenter().into(imgView);\n\n            start = m.end();\n            index++;\n        }\n\n        // Coordinate the position b/w the last part, no matter what is imageview or textview in the content,\n        // and the following recyclerview which shows any comment\n        // Simple text w/o any image\n        if(start == 0) {\n            TextView simpleText = new TextView(context);\n            simpleText.setId(View.generateViewId());\n            simpleText.setText(content);\n            parent.addView(simpleText, params);\n\n            ConstraintSet tvSet = new ConstraintSet();\n            tvSet.clone(parent);\n            tvSet.connect(simpleText.getId(), ConstraintSet.START, parent.getId(), ConstraintSet.START, 16);\n            tvSet.connect(simpleText.getId(), ConstraintSet.END, parent.getId(), ConstraintSet.END, 16);\n            tvSet.connect(simpleText.getId(), ConstraintSet.TOP, binding.guideline.getId(), ConstraintSet.BOTTOM, 16);\n            tvSet.connect(binding.headerComment.getId(), ConstraintSet.TOP, simpleText.getId(), ConstraintSet.BOTTOM, 64);\n            //tvSet.connect(binding.recyclerComments.getId(), ConstraintSet.TOP, simpleText.getId(), ConstraintSet.BOTTOM, 16);\n            //tvSet.connect(binding.headerComment.getId(), ConstraintSet.TOP, simpleText.getId(), ConstraintSet.BOTTOM, 0);\n            tvSet.applyTo(parent);\n\n        // Text after an image\n        } else if(start < content.length()) {\n            String lastParagraph = content.substring(start);\n            TextView lastView = new TextView(context);\n            lastView.setId(View.generateViewId());\n            lastView.setText(lastParagraph);\n            parent.addView(lastView, params);\n\n            ConstraintSet tvSet = new ConstraintSet();\n            tvSet.clone(parent);\n            tvSet.connect(lastView.getId(), ConstraintSet.START, parent.getId(), ConstraintSet.START, 16);\n            tvSet.connect(lastView.getId(), ConstraintSet.END, parent.getId(), ConstraintSet.END, 16);\n            tvSet.connect(lastView.getId(), ConstraintSet.TOP, prevImageId, ConstraintSet.BOTTOM, 0);\n            tvSet.connect(binding.headerComment.getId(), ConstraintSet.TOP, lastView.getId(), ConstraintSet.BOTTOM, 64);\n            tvSet.applyTo(parent);\n\n        // No text after the last image\n        } else if(start == content.length()) {\n            log.i(\"image positioned at the last\");\n            ConstraintSet imageSet = new ConstraintSet();\n            imageSet.clone(parent);\n            imageSet.connect(binding.headerComment.getId(), ConstraintSet.TOP, prevImageId, ConstraintSet.BOTTOM, 0);\n            imageSet.applyTo(parent);\n        }\n\n    }\n\n    // This abstract class notifies the state of the appbarlayout by implementing the listener.\n    // The reason that the listener should be implemented first is that the listener notifies every\n    // scrolling changes which keep the view being invalidated. The abstract class may, in turn,\n    // receive changes and only notifies the specified state to the view.\n    abstract class AppBarStateChangeListener implements AppBarLayout.OnOffsetChangedListener {\n        int mCurrentState = STATE_IDLE;\n        @Override\n        public final void onOffsetChanged(AppBarLayout appBarLayout, int verticalOffset) {\n            if (verticalOffset == 0) {\n                if (mCurrentState != STATE_EXPANDED) onStateChanged(appBarLayout, STATE_EXPANDED);\n                mCurrentState = STATE_EXPANDED;\n\n            } else if (Math.abs(verticalOffset) >= appBarLayout.getTotalScrollRange()) {\n                if (mCurrentState != STATE_COLLAPSED) onStateChanged(appBarLayout, STATE_COLLAPSED);\n                mCurrentState = STATE_COLLAPSED;\n\n            } else {\n                if(appbarOffset != verticalOffset) {\n                    appbarOffset = verticalOffset;\n                    onStateChanged(appBarLayout, STATE_IDLE);\n                }\n                mCurrentState = STATE_IDLE;\n            }\n        }\n\n        abstract void onStateChanged(AppBarLayout appBarLayout, int state);\n    }\n\n    // Set the toolbar Icon and title as the appbarlayout is scrolling, which is notified by\n    // AppBarStateChangeListener.\n    private void setToolbarTitleIcon(int state) {\n        SpannableString spannable = new SpannableString(toObject.getPostTitle());\n        int size = Math.abs(appbarOffset) / 6;\n        spannable.setSpan(new AbsoluteSizeSpan(size), 0, spannable.length(), Spanned.SPAN_EXCLUSIVE_EXCLUSIVE);\n        binding.toolbarBoardRead.setTitle(spannable);\n        switch(state) {\n            case STATE_COLLAPSED:\n                //String userPic = (TextUtils.isEmpty(obj.getUserPic()))? Constants.imgPath + \"ic_user_blank_gray\" : obj.getUserPic();\n                binding.toolbarBoardRead.setNavigationIcon(null);\n                binding.toolbarBoardRead.setTitle(spannable);\n                binding.toolbarBoardRead.setSubtitle(toObject.getUserName());\n                imgUtil.applyGlideToDrawable(userPic, Constants.ICON_SIZE_TOOLBAR_USERPIC, imgViewModel);\n                binding.toolbarBoardRead.setOnClickListener(view -> dismiss());\n                break;\n\n            case STATE_EXPANDED:\n                binding.toolbarBoardRead.setNavigationIcon(R.drawable.ic_action_navigation);\n                if(tabPage == AUTOCLUB) binding.toolbarBoardRead.setTitle(autoTitle);\n                else binding.toolbarBoardRead.setTitle(tabTitle);\n                binding.toolbarBoardRead.setSubtitle(\"\");\n                binding.toolbarBoardRead.setLogo(null);\n                break;\n\n            case STATE_IDLE: break;\n\n        }\n    }\n\n    // Method for uploading the comment to Firestore\n    private void uploadPostComment() {\n        Map<String, Object> comment = new HashMap<>();\n        comment.put(\"cnt_reply\", 0);\n        comment.put(\"comment\", binding.etComment.getText().toString());\n        comment.put(\"user_id\", viewerId);\n        comment.put(\"timestamp\", FieldValue.serverTimestamp());\n\n        WriteBatch batch = mDB.batch();\n        DocumentReference commentRef = postRef.collection(\"comments\").document();\n\n        batch.set(commentRef, comment);\n        batch.update(postRef, \"cnt_comment\", FieldValue.increment(1));\n\n        batch.commit().addOnSuccessListener(aVoid -> {\n            commentRef.get().addOnSuccessListener(snapshot -> {\n                commentShotList.add(0, snapshot);\n                commentAdapter.submitCommentList(commentShotList);\n\n                cntComment++;\n                binding.tvCntComment.setText(String.valueOf(cntComment));\n                binding.headerCommentCnt.setText(String.valueOf(cntComment));\n\n                if(!binding.switchComment.isChecked()) binding.switchComment.setChecked(true);\n                binding.nestedScrollview.fullScroll(View.FOCUS_UP);\n\n                imm.hideSoftInputFromWindow(binding.getRoot().getWindowToken(), 0);\n                // Make the comment view invisible and reset the flag.\n                binding.constraintComment.setVisibility(View.GONE);\n                isCommentVisible = !isCommentVisible;\n\n            }).addOnFailureListener(Throwable::printStackTrace);\n\n        }).addOnFailureListener(Throwable::printStackTrace);\n        /*\n        postRef.collection(\"comments\").add(comment).addOnSuccessListener(commentRef -> {\n            commentRef.get().addOnSuccessListener(snapshot -> {\n                commentShotList.add(0, snapshot);\n                //commentAdapter.notifyItemInserted(0);\n                commentAdapter.submitCommentList(Lists.newArrayList(commentShotList));\n            });\n\n            postRef.update(\"cnt_comment\", FieldValue.increment(1)).addOnSuccessListener(aVoid->{\n                cntComment++;\n                binding.tvCntComment.setText(String.valueOf(cntComment));\n                binding.headerCommentCnt.setText(String.valueOf(cntComment));\n                if(!binding.switchComment.isChecked()) binding.switchComment.setChecked(true);\n            });\n\n            binding.nestedScrollview.fullScroll(View.FOCUS_UP);\n\n        }).addOnFailureListener(Throwable::printStackTrace);\n        imm.hideSoftInputFromWindow(binding.getRoot().getWindowToken(), 0);\n        // Make the comment view invisible and reset the flag.\n        binding.constraintComment.setVisibility(View.GONE);\n        isCommentVisible = !isCommentVisible;\n\n\n        final DocumentReference docref = mDB.collection(\"users\").document(viewerId);\n        mDB.runTransaction((Transaction.Function<Void>) transaction -> {\n            DocumentSnapshot doc = transaction.get(docref);\n            comment.put(\"user_pic\", doc.getString(\"user_pic\"));\n            List<?> userNames = (List<?>)doc.get(\"user_names\");\n            if(userNames != null) {\n                String userName = (String)userNames.get(0);\n                comment.put(\"user_name\", userName);\n            }\n\n            postRef.collection(\"comments\").add(comment).addOnSuccessListener(commentRef -> {\n                commentRef.get().addOnSuccessListener(snapshot -> {\n                    commentShotList.add(0, snapshot);\n                    //commentAdapter.notifyItemInserted(0);\n                    commentAdapter.submitCommentList(Lists.newArrayList(commentShotList));\n                });\n\n                postRef.update(\"cnt_comment\", FieldValue.increment(1)).addOnSuccessListener(aVoid->{\n                    cntComment++;\n                    binding.tvCntComment.setText(String.valueOf(cntComment));\n                    binding.headerCommentCnt.setText(String.valueOf(cntComment));\n                    if(!binding.switchComment.isChecked()) binding.switchComment.setChecked(true);\n                });\n\n                binding.nestedScrollview.fullScroll(View.FOCUS_UP);\n\n            }).addOnFailureListener(Throwable::printStackTrace);\n            imm.hideSoftInputFromWindow(binding.getRoot().getWindowToken(), 0);\n            // Make the comment view invisible and reset the flag.\n            binding.constraintComment.setVisibility(View.GONE);\n            isCommentVisible = !isCommentVisible;\n            return null;\n        });\n\n         */\n\n    }\n\n    // Check if the user has already picked a post as favorite doing queries the compathy collection,\n    // documents of which contains user ids\n    private void setCompathyCount() {\n        // Prevent repeated connection to Firestore every time when users click the button.\n        final String msg = getString(R.string.board_msg_compathy);\n        if(hasCompathy) {\n            Snackbar.make(binding.getRoot(), msg, Snackbar.LENGTH_SHORT).show();\n            return;\n        }\n\n        final DocumentReference compathyRef = postRef.collection(\"compathy\").document(viewerId);\n        compathyRef.get().addOnCompleteListener(task -> {\n            if(task.isSuccessful()) {\n                DocumentSnapshot snapshot = task.getResult();\n                if(snapshot != null && snapshot.exists()) {\n                    hasCompathy = true;\n                    Snackbar.make(binding.getRoot(), msg, Snackbar.LENGTH_SHORT).show();\n                } else {\n                    postRef.update(\"cnt_compathy\", FieldValue.increment(1)).addOnSuccessListener(aVoid -> {\n                        Map<String, Object> data = new HashMap<>();\n                        data.put(\"timestamp\", FieldValue.serverTimestamp());\n                        compathyRef.set(data);\n                        cntCompathy++;\n                        binding.tvCntCompathy.setText(String.valueOf(cntCompathy));\n\n                    });\n                }\n            }\n        });\n    }\n\n    // As long as a post belongs to the user, show the menu in the toolbar which enables the user\n    // to edits or delete the post.\n\n\n    // Display the auto club if the user has set the automaker, automodel, enginetype, and autoyear.\n    private void setPostAutoclub() {\n        StringBuilder sb = new StringBuilder();\n        mDB.collection(\"users\").document(postOwnerId).get().addOnSuccessListener(snapshot -> {\n            if(snapshot.exists()) {\n                String jsonAutoInfo = snapshot.getString(\"auto_data\");\n                try {\n                    JSONArray json = new JSONArray(jsonAutoInfo);\n                    if(json.length() > 0) {\n                        if(json.optString(1) != null) sb.append(json.optString(1));\n                        else sb.append(json.optString(0));\n                        binding.tvAutoinfo.setText(sb);\n                    }\n                } catch(JSONException | NullPointerException e) { e.printStackTrace();}\n            }\n        }).addOnFailureListener(Throwable::printStackTrace);\n    }\n\n    private boolean checkUserName() {\n        String userName = mSettings.getString(Constants.USER_NAME, null);\n        if (TextUtils.isEmpty(userName)) {\n            Snackbar snackbar = Snackbar.make(binding.getRoot(),\n                    getString(R.string.board_msg_username), Snackbar.LENGTH_LONG);\n\n            snackbar.setAction(R.string.board_msg_action_setting, view -> {\n                Intent intent = new Intent(getActivity(), SettingActivity.class);\n                intent.putExtra(\"postingboard\", Constants.REQUEST_BOARD_SETTING_USERNAME);\n                activityResultLauncher.launch(intent);\n            }).show();\n            return false;\n        } else return true;\n    }\n}\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/com/silverback/carman/fragments/BoardReadFragment.java b/app/src/main/java/com/silverback/carman/fragments/BoardReadFragment.java
--- a/app/src/main/java/com/silverback/carman/fragments/BoardReadFragment.java	
+++ b/app/src/main/java/com/silverback/carman/fragments/BoardReadFragment.java	
@@ -198,10 +198,9 @@
         queryPaginationUtil = new QueryPostPagingUtil(mDB, this);
         commentShotList = new ArrayList<>();
         commentAdapter = new BoardCommentAdapter(getContext(), commentShotList, viewerId, this);
+
         postRef = mDB.collection("user_post").document(documentId);
-
-        // defined in getFirstQueryResult() instead of initially loading the comment.
-        //queryPaginationUtil.setCommentQuery(postRef, "timestamp");
+        queryPaginationUtil.setCommentQuery(postRef, "timestamp");
     }
 
     @Override
@@ -402,19 +401,9 @@
     @Override
     public void onCheckedChanged(CompoundButton compoundButton, boolean isChecked) {
         if(isChecked) {
-            //queryPaginationUtil.setCommentQuery(postRef);
             binding.recyclerComments.setVisibility(View.VISIBLE);
             int visible = (cntComment > PAGING_COMMENT) ? View.VISIBLE : View.GONE;
-
             binding.imgbtnLoadComment.setVisibility(visible);
-            if(cntComment > PAGING_COMMENT) binding.imgbtnLoadComment.setVisibility(View.VISIBLE);
-            else binding.imgbtnLoadComment.setVisibility(View.GONE);
-
-            queryPaginationUtil.setCommentQuery(postRef, "timestamp");
-            /*
-            binding.nestedScrollview.post(() ->
-                    binding.nestedScrollview.smoothScrollTo(0, View.FOCUS_DOWN, 1000));
-            */
         } else {
             //commentAdapter.notifyItemRangeRemoved(0, commentShotList.size());
             //commentShotList.clear();
@@ -463,30 +452,30 @@
     public void getFirstQueryResult(QuerySnapshot commentShots) {
         commentShotList.clear();
         for(DocumentSnapshot comment : commentShots) commentShotList.add(comment);
-        //commentAdapter.notifyItemRangeChanged(0, commentShots.size());
+        commentAdapter.notifyItemRangeChanged(0, commentShots.size());
         //int scrollY = binding.nestedScrollview.getHeight();
         //binding.nestedScrollview.post(() -> binding.nestedScrollview.smoothScrollTo(0, View.FOCUS_DOWN, 1000));
-        commentAdapter.submitCommentList(commentShotList);
+        //commentAdapter.submitCommentList(commentShotList);
     }
 
     @Override
     public void getNextQueryResult(QuerySnapshot nextShots) {
-        //final int start = commentShotList.size();
+        final int start = commentShotList.size();
         for(DocumentSnapshot comment : nextShots) commentShotList.add(comment);
-        //commentAdapter.notifyItemRangeChanged(start, nextShots.size());
+        commentAdapter.notifyItemRangeChanged(start, nextShots.size());
         //int scrollY = binding.nestedScrollview.getHeight();
         //binding.nestedScrollview.post(() -> binding.nestedScrollview.smoothScrollTo(0, scrollY, 1000));
-        commentAdapter.submitCommentList(commentShotList);
+        //commentAdapter.submitCommentList(commentShotList);
     }
 
     @Override
     public void getLastQueryResult(QuerySnapshot lastShots) {
         final int start = commentShotList.size();
         for(DocumentSnapshot comment : lastShots) commentShotList.add(comment);
-        //commentAdapter.notifyItemRangeChanged(start, lastShots.size());
+        commentAdapter.notifyItemRangeChanged(start, lastShots.size());
         //int scrollY = binding.nestedScrollview.getHeight();
         //binding.nestedScrollview.post(() -> binding.nestedScrollview.smoothScrollTo(0, scrollY, 1000));
-        commentAdapter.submitCommentList(commentShotList);
+        //commentAdapter.submitCommentList(commentShotList);
     }
 
     @Override
Index: app/src/main/res/layout/fragment_board_read.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><?xml version=\"1.0\" encoding=\"utf-8\"?>\n<androidx.coordinatorlayout.widget.CoordinatorLayout\n    xmlns:android=\"http://schemas.android.com/apk/res/android\"\n    xmlns:app=\"http://schemas.android.com/apk/res-auto\"\n    xmlns:tools=\"http://schemas.android.com/tools\"\n    android:id=\"@+id/coordinatorLayout\"\n    android:layout_width=\"match_parent\"\n    android:layout_height=\"match_parent\"\n    android:background=\"@android:color/white\"\n    tools:context=\".fragments.BoardReadFragment\">\n    <com.google.android.material.appbar.AppBarLayout\n        android:id=\"@+id/appbar_board_read\"\n        android:layout_width=\"match_parent\"\n        android:layout_height=\"wrap_content\"\n        android:theme=\"@style/ThemeOverlay.AppCompat.Dark.ActionBar\">\n        <com.google.android.material.appbar.CollapsingToolbarLayout\n            android:id=\"@+id/collapsingToolbar\"\n            android:layout_width=\"match_parent\"\n            android:layout_height=\"match_parent\"\n            android:gravity=\"start\"\n            app:contentScrim=\"?attr/colorPrimary\"\n            app:titleEnabled=\"false\"\n            app:layout_scrollFlags=\"scroll|enterAlways|exitUntilCollapsed\" >\n            <androidx.appcompat.widget.Toolbar\n                android:theme=\"@style/ThemeOverlay.AppCompat.Dark.ActionBar\"\n                app:popupTheme=\"@style/ThemeOverlay.AppCompat.Light\"\n                android:id=\"@+id/toolbar_board_read\"\n                android:layout_width=\"match_parent\"\n                android:layout_height=\"?attr/actionBarSize\"\n                android:background=\"@color/bgToolbar\"\n                android:elevation=\"2dp\"\n                app:contentInsetLeft=\"8dp\"\n                app:contentInsetStart=\"8dp\"\n                app:titleMarginStart=\"16dp\"\n                app:titleTextColor=\"#FFFFFF\"\n                app:navigationIcon=\"?homeAsUpIndicator\"\n                app:layout_collapseMode=\"pin\" />\n            <androidx.constraintlayout.widget.ConstraintLayout\n                android:id=\"@+id/constraint_header\"\n                android:layout_width=\"match_parent\"\n                android:layout_height=\"wrap_content\"\n                android:padding=\"8dp\"\n                android:layout_marginTop=\"?attr/actionBarSize\"\n                android:background=\"@color/bgDarkerGray\"\n                app:layout_collapseMode=\"parallax\" >\n                <TextView\n                    android:id=\"@+id/tv_post_title\"\n                    android:layout_width=\"0dp\"\n                    android:layout_height=\"wrap_content\"\n                    android:layout_marginBottom=\"8dp\"\n                    android:textColor=\"@android:color/white\"\n                    android:textSize=\"@dimen/extraLargeText\"\n                    android:textStyle=\"bold\"\n                    app:layout_constraintEnd_toEndOf=\"parent\"\n                    app:layout_constraintStart_toStartOf=\"parent\"\n                    app:layout_constraintTop_toTopOf=\"parent\" />\n                <ImageView\n                    android:id=\"@+id/img_userpic\"\n                    android:layout_width=\"50dp\"\n                    android:layout_height=\"50dp\"\n                    android:layout_marginTop=\"16dp\"\n                    android:contentDescription=\"@null\"\n                    android:scaleType=\"fitCenter\"\n                    app:layout_constraintStart_toStartOf=\"@+id/tv_post_title\"\n                    app:layout_constraintTop_toBottomOf=\"@+id/tv_post_title\"\n                    tools:src=\"@tools:sample/avatars[0]\" />\n                <TextView\n                    android:id=\"@+id/tv_username\"\n                    android:layout_width=\"0dp\"\n                    android:layout_height=\"wrap_content\"\n                    android:layout_marginStart=\"16dp\"\n                    android:layout_marginTop=\"3dp\"\n                    android:text=\"@null\"\n                    android:textColor=\"@android:color/white\"\n                    android:textSize=\"@dimen/smallText\"\n                    app:layout_constraintStart_toEndOf=\"@+id/img_userpic\"\n                    app:layout_constraintTop_toTopOf=\"@+id/img_userpic\" />\n                <ImageView\n                    android:id=\"@+id/img_compathy\"\n                    android:layout_width=\"15dp\"\n                    android:layout_height=\"15dp\"\n                    android:layout_marginEnd=\"8dp\"\n                    android:src=\"@drawable/img_compathy\"\n                    android:scaleType=\"fitCenter\"\n                    android:contentDescription=\"@null\"\n                    app:layout_constraintEnd_toStartOf=\"@+id/tv_cnt_compathy\"\n                    app:layout_constraintTop_toTopOf=\"@+id/img_userpic\" />\n                <TextView\n                    android:id=\"@+id/tv_cnt_compathy\"\n                    android:layout_width=\"wrap_content\"\n                    android:layout_height=\"wrap_content\"\n                    android:layout_marginEnd=\"24dp\"\n                    android:textColor=\"@android:color/white\"\n                    android:textSize=\"@dimen/extraSmallText\"\n                    app:layout_constraintBottom_toBottomOf=\"@+id/img_compathy\"\n                    app:layout_constraintEnd_toStartOf=\"@+id/img_comment\"\n                    app:layout_constraintTop_toTopOf=\"@+id/img_compathy\" />\n                <ImageView\n                    android:id=\"@+id/img_comment\"\n                    android:layout_width=\"15dp\"\n                    android:layout_height=\"15dp\"\n                    android:layout_marginEnd=\"8dp\"\n                    android:src=\"@drawable/img_comment\"\n                    android:scaleType=\"fitCenter\"\n                    android:contentDescription=\"@null\"\n                    app:layout_constraintBottom_toBottomOf=\"@+id/img_compathy\"\n                    app:layout_constraintEnd_toStartOf=\"@+id/tv_cnt_comment\"\n                    app:layout_constraintTop_toTopOf=\"@+id/img_compathy\"\n                    app:layout_constraintVertical_bias=\"0.100000024\" />\n                <TextView\n                    android:id=\"@+id/tv_cnt_comment\"\n                    android:layout_width=\"wrap_content\"\n                    android:layout_height=\"wrap_content\"\n                    android:layout_marginEnd=\"8dp\"\n                    android:textColor=\"@android:color/white\"\n                    android:textSize=\"@dimen/extraSmallText\"\n                    app:layout_constraintBottom_toBottomOf=\"@+id/img_compathy\"\n                    app:layout_constraintEnd_toEndOf=\"parent\"\n                    app:layout_constraintTop_toTopOf=\"@+id/img_compathy\" />\n                <TextView\n                    android:id=\"@+id/tv_autoinfo\"\n                    android:layout_width=\"0dp\"\n                    android:layout_height=\"wrap_content\"\n                    android:layout_marginStart=\"16dp\"\n                    android:layout_marginBottom=\"3dp\"\n                    android:textColor=\"@android:color/white\"\n                    android:textSize=\"@dimen/extraSmallText\"\n                    app:layout_constraintBottom_toBottomOf=\"@+id/img_userpic\"\n                    app:layout_constraintStart_toEndOf=\"@+id/img_userpic\" />\n                <TextView\n                    android:id=\"@+id/tv_posting_date\"\n                    android:layout_width=\"0dp\"\n                    android:layout_height=\"wrap_content\"\n                    android:layout_marginEnd=\"8dp\"\n                    android:gravity=\"end\"\n                    android:textColor=\"@android:color/white\"\n                    android:textSize=\"@dimen/extraSmallText\"\n                    app:layout_constraintBottom_toBottomOf=\"@+id/img_userpic\"\n                    app:layout_constraintEnd_toEndOf=\"parent\" />\n            </androidx.constraintlayout.widget.ConstraintLayout>\n        </com.google.android.material.appbar.CollapsingToolbarLayout>\n    </com.google.android.material.appbar.AppBarLayout>\n\n    <androidx.core.widget.NestedScrollView\n        android:id=\"@+id/nestedScrollview\"\n        android:layout_width=\"match_parent\"\n        android:layout_height=\"match_parent\"\n        android:fillViewport=\"true\"\n        android:scrollbars=\"vertical\"\n        app:layout_dodgeInsetEdges=\"top\"\n        app:layout_behavior=\"com.google.android.material.appbar.AppBarLayout$ScrollingViewBehavior\">\n        <androidx.constraintlayout.widget.ConstraintLayout\n            android:id=\"@+id/constraint_posting\"\n            android:layout_width=\"match_parent\"\n            android:layout_height=\"wrap_content\"\n            android:background=\"@android:color/background_light\">\n            <!-- this guideline is used for an anchor to insert the post content -->\n            <androidx.constraintlayout.widget.Guideline\n                android:id=\"@+id/guideline\"\n                android:layout_width=\"match_parent\"\n                android:layout_height=\"wrap_content\"\n                android:orientation=\"horizontal\"\n                app:layout_constraintGuide_begin=\"8dp\" />\n            <RelativeLayout\n                android:id=\"@+id/header_comment\"\n                android:layout_width=\"match_parent\"\n                android:layout_height=\"35dp\"\n                android:gravity=\"center_vertical\"\n                android:layout_margin=\"3dp\"\n                android:padding=\"3dp\"\n                android:background=\"@drawable/bg_colored_border\"\n                app:layout_constraintEnd_toEndOf=\"parent\"\n                app:layout_constraintStart_toStartOf=\"parent\"\n                app:layout_constraintTop_toBottomOf=\"@null\" > <!-- defined in the code -->\n                <TextView\n                    android:id=\"@+id/tv_comment_label\"\n                    android:layout_width=\"wrap_content\"\n                    android:layout_height=\"wrap_content\"\n                    android:layout_alignParentStart=\"true\"\n                    android:layout_alignParentTop=\"true\"\n                    android:layout_alignParentBottom=\"true\"\n                    android:layout_marginStart=\"3dp\"\n                    android:gravity=\"center_vertical\"\n                    android:text=\"@string/board_comment_header\"\n                    android:textSize=\"@dimen/subtitle\"\n                    android:textStyle=\"bold\" />\n                <TextView\n                    android:id=\"@+id/header_comment_cnt\"\n                    android:layout_width=\"100dp\"\n                    android:layout_height=\"wrap_content\"\n                    android:layout_alignParentTop=\"true\"\n                    android:layout_alignParentBottom=\"true\"\n                    android:layout_marginStart=\"8dp\"\n                    android:layout_toEndOf=\"@id/tv_comment_label\"\n                    android:gravity=\"start|center_vertical\"\n                    android:text=\"@null\"\n                    android:textColor=\"@android:color/holo_blue_light\"\n                    android:textSize=\"@dimen/subtitle\" />\n                <androidx.appcompat.widget.SwitchCompat style=\"@style/BoardSwitchCompat\"\n                    android:id=\"@+id/switch_comment\"\n                    android:layout_width=\"wrap_content\"\n                    android:layout_height=\"wrap_content\"\n                    android:layout_alignParentTop=\"true\"\n                    android:layout_alignParentEnd=\"true\"\n                    android:layout_alignParentBottom=\"true\" />\n            </RelativeLayout>\n            <androidx.recyclerview.widget.RecyclerView\n                android:id=\"@+id/recycler_comments\"\n                android:visibility=\"gone\"\n                android:layout_width=\"match_parent\"\n                android:layout_height=\"wrap_content\"\n                app:layout_behavior=\"@string/appbar_scrolling_view_behavior\"\n                app:layout_constraintTop_toBottomOf=\"@id/header_comment\"\n                app:layout_constraintEnd_toEndOf=\"parent\"\n                app:layout_constraintStart_toStartOf=\"parent\" />\n            <!-- Preoccupy the dummy space to be overlapped by the bottom menu bar -->\n            <View\n                android:id=\"@+id/view_dummy\"\n                android:layout_width=\"match_parent\"\n                android:layout_height=\"50dp\"\n                android:background=\"@android:color/transparent\"\n                app:layout_constraintTop_toBottomOf=\"@id/recycler_comments\"\n                app:layout_constraintStart_toStartOf=\"parent\"\n                app:layout_constraintEnd_toEndOf=\"parent\" />\n        </androidx.constraintlayout.widget.ConstraintLayout>\n    </androidx.core.widget.NestedScrollView>\n    <!-- comment writing form -->\n    <androidx.constraintlayout.widget.ConstraintLayout\n        android:id=\"@+id/constraint_comment\"\n        android:visibility=\"gone\"\n        android:layout_width=\"match_parent\"\n        android:layout_height=\"wrap_content\"\n        android:paddingTop=\"16dp\"\n        android:background=\"@android:color/white\"\n        android:layout_gravity=\"bottom\"\n        app:layout_dodgeInsetEdges=\"bottom\">\n        <TextView\n            android:id=\"@+id/tv_label_comment\"\n            android:layout_width=\"wrap_content\"\n            android:layout_height=\"wrap_content\"\n            android:layout_marginStart=\"8dp\"\n            android:labelFor=\"@id/et_comment\"\n            android:text=\"@string/board_title_comment\"\n            android:textSize=\"@dimen/smallText\"\n            android:textStyle=\"bold\"\n            app:layout_constraintStart_toStartOf=\"parent\"\n            app:layout_constraintTop_toTopOf=\"parent\" />\n        <ImageButton\n            android:id=\"@+id/imgbtn_send_comment\"\n            android:layout_width=\"wrap_content\"\n            android:layout_height=\"wrap_content\"\n            android:layout_marginStart=\"8dp\"\n            android:contentDescription=\"@null\"\n            android:padding=\"8dp\"\n            android:background=\"@android:color/transparent\"\n            android:src=\"@android:drawable/ic_menu_send\"\n            app:layout_constraintBottom_toBottomOf=\"@+id/tv_label_comment\"\n            app:layout_constraintEnd_toEndOf=\"parent\"\n            app:layout_constraintTop_toTopOf=\"@+id/tv_label_comment\" />\n        <EditText\n            android:id=\"@+id/et_comment\"\n            android:layout_width=\"0dp\"\n            android:layout_height=\"60dp\"\n            android:layout_margin=\"8dp\"\n            android:background=\"@drawable/bg_colored_border\"\n            android:gravity=\"top|start\"\n            android:inputType=\"textMultiLine\"\n            android:maxLines=\"5\"\n            android:padding=\"8dp\"\n            android:scrollbars=\"vertical\"\n            android:textSize=\"@dimen/smallText\"\n            app:layout_constraintEnd_toEndOf=\"parent\"\n            app:layout_constraintStart_toStartOf=\"parent\"\n            app:layout_constraintTop_toBottomOf=\"@+id/tv_label_comment\"\n            tools:ignore=\"autofill\" />\n    </androidx.constraintlayout.widget.ConstraintLayout>\n    <!-- compathy, cocmment imageButtons in the bottom -->\n    <androidx.constraintlayout.widget.ConstraintLayout\n        android:id=\"@+id/constraint_bottom\"\n        android:layout_width=\"match_parent\"\n        android:layout_height=\"40dp\"\n        android:layout_gravity=\"bottom\"\n        android:padding=\"5dp\"\n        android:background=\"@color/recyclerDivider\"\n        app:layout_insetEdge=\"bottom\">\n        <ImageButton\n            android:id=\"@+id/imgbtn_compathy\"\n            android:layout_width=\"40dp\"\n            android:layout_height=\"30dp\"\n            android:layout_marginStart=\"32dp\"\n            android:background=\"@android:color/transparent\"\n            android:contentDescription=\"@null\"\n            android:padding=\"0dp\"\n            android:scaleType=\"fitCenter\"\n            android:src=\"@drawable/btn_compathy\"\n            app:layout_constraintBottom_toBottomOf=\"parent\"\n            app:layout_constraintStart_toStartOf=\"parent\"\n            app:layout_constraintTop_toTopOf=\"parent\" />\n        <TextView\n            android:id=\"@+id/tv_btn_compathy\"\n            android:layout_width=\"wrap_content\"\n            android:layout_height=\"wrap_content\"\n            android:layout_marginStart=\"8dp\"\n            android:text=\"@string/board_btn_compathy\"\n            android:textSize=\"@dimen/extraSmallText\"\n            android:textStyle=\"bold\"\n            app:layout_constraintBottom_toBottomOf=\"@+id/imgbtn_compathy\"\n            app:layout_constraintStart_toEndOf=\"@+id/imgbtn_compathy\"\n            app:layout_constraintTop_toTopOf=\"@+id/imgbtn_compathy\" />\n\n        <ImageButton\n            android:id=\"@+id/imgbtn_load_comment\"\n            android:visibility=\"gone\"\n            android:layout_width=\"40dp\"\n            android:layout_height=\"30dp\"\n            android:background=\"@android:color/transparent\"\n            android:contentDescription=\"@null\"\n            android:padding=\"0dp\"\n            android:scaleType=\"fitCenter\"\n            android:src=\"@drawable/ic_add_comment\"\n            app:layout_constraintBottom_toBottomOf=\"parent\"\n            app:layout_constraintEnd_toStartOf=\"@+id/imgbtn_comment\"\n            app:layout_constraintStart_toEndOf=\"@+id/tv_btn_compathy\"\n            app:layout_constraintTop_toTopOf=\"parent\"\n            tools:visibility=\"visible\" />\n        <ImageButton\n            android:id=\"@+id/imgbtn_comment\"\n            android:layout_width=\"40dp\"\n            android:layout_height=\"30dp\"\n            android:layout_marginEnd=\"8dp\"\n            android:background=\"@android:color/transparent\"\n            android:contentDescription=\"@null\"\n            android:padding=\"0dp\"\n            android:scaleType=\"fitCenter\"\n            android:src=\"@drawable/btn_comment\"\n            app:layout_constraintBottom_toBottomOf=\"parent\"\n            app:layout_constraintEnd_toStartOf=\"@+id/tv_btn_comment\"\n            app:layout_constraintTop_toTopOf=\"parent\" />\n\n        <TextView\n            android:id=\"@+id/tv_btn_comment\"\n            android:layout_width=\"wrap_content\"\n            android:layout_height=\"wrap_content\"\n            android:layout_marginEnd=\"32dp\"\n            android:text=\"@string/board_btn_comment\"\n            android:textSize=\"@dimen/extraSmallText\"\n            android:textStyle=\"bold\"\n            app:layout_constraintBottom_toBottomOf=\"@+id/imgbtn_comment\"\n            app:layout_constraintEnd_toEndOf=\"parent\"\n            app:layout_constraintTop_toTopOf=\"@+id/imgbtn_comment\" />\n    </androidx.constraintlayout.widget.ConstraintLayout>\n</androidx.coordinatorlayout.widget.CoordinatorLayout>\n\n\n\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/res/layout/fragment_board_read.xml b/app/src/main/res/layout/fragment_board_read.xml
--- a/app/src/main/res/layout/fragment_board_read.xml	
+++ b/app/src/main/res/layout/fragment_board_read.xml	
@@ -204,6 +204,7 @@
                     android:layout_alignParentEnd="true"
                     android:layout_alignParentBottom="true" />
             </RelativeLayout>
+            <!--
             <androidx.recyclerview.widget.RecyclerView
                 android:id="@+id/recycler_comments"
                 android:visibility="gone"
@@ -213,7 +214,6 @@
                 app:layout_constraintTop_toBottomOf="@id/header_comment"
                 app:layout_constraintEnd_toEndOf="parent"
                 app:layout_constraintStart_toStartOf="parent" />
-            <!-- Preoccupy the dummy space to be overlapped by the bottom menu bar -->
             <View
                 android:id="@+id/view_dummy"
                 android:layout_width="match_parent"
@@ -222,8 +222,26 @@
                 app:layout_constraintTop_toBottomOf="@id/recycler_comments"
                 app:layout_constraintStart_toStartOf="parent"
                 app:layout_constraintEnd_toEndOf="parent" />
+            -->
         </androidx.constraintlayout.widget.ConstraintLayout>
     </androidx.core.widget.NestedScrollView>
+    <androidx.recyclerview.widget.RecyclerView
+        android:id="@+id/recycler_comments"
+        android:visibility="gone"
+        android:layout_width="match_parent"
+        android:layout_height="wrap_content"
+        app:layout_behavior="@string/appbar_scrolling_view_behavior"
+        app:layout_constraintTop_toBottomOf="@id/header_comment"
+        app:layout_constraintEnd_toEndOf="parent"
+        app:layout_constraintStart_toStartOf="parent" />
+    <View
+        android:id="@+id/view_dummy"
+        android:layout_width="match_parent"
+        android:layout_height="50dp"
+        android:background="@android:color/transparent"
+        app:layout_constraintTop_toBottomOf="@id/recycler_comments"
+        app:layout_constraintStart_toStartOf="parent"
+        app:layout_constraintEnd_toEndOf="parent" />
     <!-- comment writing form -->
     <androidx.constraintlayout.widget.ConstraintLayout
         android:id="@+id/constraint_comment"
